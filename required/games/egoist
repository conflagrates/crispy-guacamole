local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/vozoid/ui-libraries/main/venus/source.lua", true))()

local Main = library:Load({Name = "Yor's", Theme = "Dark", SizeX = 440, SizeY = 480, ColorOverrides = {}})

-- // Tabs
local Essentials = Main:Tab("Essentials")

-- // Sections
local Efficiency = Essentials:Section({Name = "Efficiency", column = 1})
local Visuals = Essentials:Section({Name = "Visuals", column = 1})
local PlayerS = Essentials:Section({Name = "Player", column = 2})
local Keybinds = Essentials:Section({Name = "Keybinds", column = 2})

-- // Normal Vars
local vim = game:GetService("VirtualInputManager")

-- // Toggle Vars
_G.autoBlock = true
_G.esp = true
_G.ballESP = true

-- // Toggle Functions
function autoBlock()
    while _G.autoBlock == true do
        vim:SendKeyEvent(true, "Q", false, game)
        task.wait(nil)
		vim:SendKeyEvent(true, "Q", false, game)
		task.wait(nil)
        vim:SendKeyEvent(true, "E", false, game)
        task.wait(nil)
		vim:SendKeyEvent(true, "E", false, game)
		task.wait(nil)
    end
end

function esp()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Highlight = Instance.new("Highlight")
Highlight.Name = "Highlight"
function ApplyToCurrentPlayers()
    for i,player in pairs(Players:GetChildren()) do 
        repeat wait() until player.Character
        if not player.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("Highlight") then
            local HighlightClone = Highlight:Clone()
            HighlightClone.Adornee = player.Character
            HighlightClone.Parent = player.Character:FindFirstChild("HumanoidRootPart")
            HighlightClone.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            HighlightClone.Name = "Highlight"
            HighlightClone.FillColor = Color3.fromRGB(179, 129, 148)
        else 
            player.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("Highlight").Enabled = true
        end
    end
end    
while _G.esp == true do
    ApplyToCurrentPlayers()
end
end

function ballESP()
local Ball = game.Workspace.ClientBalls.ClientBall
local RunService = game:GetService("RunService")
local Highlight = Instance.new("Highlight")
Highlight.Name = "Highlight"
if not Ball:FindFirstChild("Highlight") then
    local HighlightClone = Highlight:Clone()
            HighlightClone.Adornee = Ball
            HighlightClone.Parent = Ball
            HighlightClone.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            HighlightClone.Name = "Highlight"
            HighlightClone.FillColor = Color3.fromRGB(179, 129, 148)
end
end

local AutoBlock = Efficiency:Toggle({Name = "Auto-Block", Flag = "auto-Block", callback = function(bool)
	_G.autoBlock = bool
	autoBlock()
end})

local PlayerESP = Visuals:Toggle({Name = "ESP", Flag = "esp", callback = function(bool)
	_G.esp = bool
	esp()
	if _G.esp == false then
        for _,plr in next, game:GetService("Players"):GetPlayers() do
              if plr.Character.HumanoidRootPart.Highlight then
                plr.Character.HumanoidRootPart.Highlight.Enabled = false
            end
        end
     end
end})

local ballesp = Visuals:Toggle({Name = "Ball ESP", Flag = "ballesp", callback = function(bool)
	_G.ballESP = bool
	ballESP()
	local BallHighlight = game.Workspace.ClientBalls.ClientBall.Highlight
	if _G.ballESP == false then
        BallHighlight.Enabled = false
     else
        BallHighlight.Enabled = true
    end
end})

local Speed = PlayerS:Slider({Name = "WalkSpeed", Min = 28, Max = 120, Default = 28, Flag = "Slider", Callback = function(slider)
   local humanoid = game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid")
   while wait do
	   humanoid.WalkSpeed = slider
	   task.wait(nil)
	   if humanoid.WalkSpeed ~= slider then
	   humanoid.WalkSpeed = slider
	   task.wait(nil)
	   end
   end
end})

local EnableBinds = Keybinds:Button({Name = "Enable - Z, C, X", Callback = function()
   local uis = game:GetService("UserInputService")
   local player = game:GetService("Players").LocalPlayer
   local teleportTo = game:GetService("Workspace").ClientBalls.ClientBall
   
   uis.InputBegan:Connect(function(input, isTyping)
   
   if input.KeyCode == Enum.KeyCode.Z and not isTyping then
   vim:SendKeyEvent(true, "E", false, game)
   wait(0.5)
   vim:SendKeyEvent(true, "Q", false, game)
   
   elseif input.KeyCode == Enum.KeyCode.C and not isTyping then
   vim:SendKeyEvent(true, "Q", false, game)
   wait(0.5)
   vim:SendKeyEvent(true, "E", false, game)
   
   elseif input.KeyCode == Enum.KeyCode.X and not isTyping then
   player.Character.HumanoidRootPart.CFrame = teleportTo.CFrame
   end
   end)
end})
