-- // Toggle Vars
getgenv().esp = true
getgenv().unban = true
getgenv().AutoFarm = false

--// Loading The AutoFarm
loadstring(game:HttpGet('https://raw.githubusercontent.com/1201for/littlegui/main/Breaking-Point'))()
task.wait(1)

--// Main Functions
function esp()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Highlight = Instance.new("Highlight")
Highlight.Name = "Highlight"
function ApplyToCurrentPlayers()
    for i,player in pairs(Players:GetChildren()) do 
        repeat wait() until player.Character
        if not player.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("Highlight") then
            local HighlightClone = Highlight:Clone()
            HighlightClone.Adornee = player.Character
            HighlightClone.Parent = player.Character:FindFirstChild("HumanoidRootPart")
            HighlightClone.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            HighlightClone.Name = "Highlight"
            HighlightClone.FillColor = Color3.fromRGB(105, 108, 255)
        else 
            player.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("Highlight").Enabled = true
        end
    end
end    
while getgenv().esp == true do
    ApplyToCurrentPlayers()
    wait()
end
end

function unban()
while getgenv().unban do
task.wait(nil)
local args = {
    [1] = 42,
    [2] = true
}
game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
end
end

--// Loading the Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/urgone/Ui-Libraries/main/IreXion%20Ui%20Lib/Source.lua"))()
--To close/open the UI (after it's been initialized) use Library:Close() to toggle it, use the keybind option to quickly make a toggle for it without hassle (there is an example below)
 
--Making a window
local Gui = Library:AddGui({
Title = {"Radiant", "UI Library"},
ThemeColor = Color3.fromRGB(0, 0, 255),
ToggleKey = Enum.KeyCode.Insert,
})


local Market = Gui:AddTab("Market")
local Comp = Gui:AddTab("Competitive")

local MarketCategory = Market:AddCategory("Market")
local CompCategory = Market:AddCategory("Competitive")
 
--Toggle
MarketCategory:AddToggle("Unban",false,function(a) getgenv().unban = a unban() end)
CompCategory:AddToggle("ESP",false,function(a) getgenv().esp = a esp() if getgenv().esp == false then for _,plr in next, game:GetService("Players"):GetPlayers() do if plr.Character.HumanoidRootPart.Highlight then plr.Character.HumanoidRootPart.Highlight.Enabled = false end end end end)
CompCategory:AddToggle("Auto-Farm",false,function(a) getgenv().AutoFarm = a end)
--If the state is set to true by default then it will fire the callback when the library is initialized
 
--List
local List = MarketCategory:AddDropdown("Purchase", {
"Candy Crown",
"Royal Red",
"Antler Case",
"/e rain",
}, function(a)
if a == "Candy Crown" then local args = { [1] = 66, [2] = "Knife Skins", [3] = "Winter" } game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer(unpack(args)) elseif a == "Royal Red" then local args = { [1] = 66, [2] = "Chair Skins", [3] = "Winter" } game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer(unpack(args)) elseif a == "Antler Case" then local args = { [1] = 66, [2] = "Accessories", [3] = "Knife Antlers" } game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer(unpack(args)) elseif a == "/e rain" then local args = { [1] = 66, [2] = "Animations", [3] = "Exclusive" } game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer(unpack(args)) elseif a == "None" then end end
end)

 
--Slider
CompCategory:AddSlider("Speed",20,200,30,function(a) local ws = a local timetotween = 3 game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.Humanoid,TweenInfo.new(timetotween),{WalkSpeed = ws}):Play() end})
 
--Keybind
--Window:AddBind({text = "Toggle UI", key = "Insert", callback = function() Library:Close() end})
--Window:AddBind({text = "Bind", flag = "bind", hold = true, key = "E" , callback = function(a) if a then print"let go" else print"holding" end end}) --key can also be Enum.KeyCode.E, instead of the name/string
--Window:AddBind({text = "Toggle UI", key = "RightShift", callback = function() library:Close() end})
 
--Color Picker
--Window:AddColor({text = "Color", flag = "color", color = Color3.fromRGB(255, 65, 65), callback = function(a) print(a) end})
--Window:AddColor({text = "Color", flag = "color", color = {1, 0.2, 0.2}, callback = function(a) print(a) end})
--Uses a table instead of a color value (each value has to range from 0 to 1, think of it as using Color3.new), useful for loading json encoded options from a save file
 
--Initialize the library, so everything will get created
--Library:Init()
wait(5)
--print("Toggle is currently:", Library.flags["toggle"])
--print("Second toggle is currently:", Library.flags["toggle1"])
--Flags can be useful for a lot of stuff, get creative with them :)
--You can also get the value/state/key from each option if they're defined
